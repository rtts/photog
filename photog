#!/usr/bin/env python3
import os, io, random
from PIL import Image
from jinja2 import Template
from zipfile import ZipFile
from natsort import natsorted
from configparser import ConfigParser

S = 500
M = 2000
L = 4000
DEFAULT_OPTIONS = '''sort = ascending
zipping = true
'''
T = Template(open(os.path.join(os.path.dirname(__file__), 'template.html'), 'r').read())

def create_website():
    '''Walks the directory tree and generates indexes and thumbnails, but only if they don't exist yet
'''
    for (dir, dirs, files) in os.walk('.'):
        if dir.startswith('./.'):
            continue
        if dir.startswith('./static'):
            continue
        if os.path.basename(dir) == 'thumbnails':
            continue
        if not any([file.lower().endswith('.jpg') for file in files]):
            continue

        # Create empty thumbnails dir and photog.ini file
        os.makedirs(os.path.join(dir, 'thumbnails'), exist_ok=True)
        open(os.path.join(dir, 'photog.ini'), 'a').close()

        # Only generate index.html if needed
        try:
            if not os.path.exists(os.path.join(dir, 'index.html')):
                generate_index(dir, files)
            elif os.path.getmtime(os.path.join(dir, 'index.html')) < os.path.getmtime(os.path.join(dir, 'photog.ini')):
                generate_index(dir, files)
            else:
                for file in files:
                    if not file.lower().endswith('.jpg'):
                        continue
                    name = os.path.splitext(file)[0]
                    if os.path.getmtime(os.path.join(dir, 'thumbnails', name + ' (large)' + '.jpg')) < os.path.getmtime(os.path.join(dir, file)):
                        generate_index(dir, files)
                        break
        except:
            generate_index(dir, files)

def generate_index(dir, files):
    '''Processes all photos in a directory and generates an index.html.
'''
    photos = []
    inifile = os.path.join(dir, 'photog.ini')
    options = read_inifile(inifile)
    zippath = os.path.join(dir, 'all.zip')
    if options['zipping']:
        zipfile = ZipFile(zippath, 'w')
    elif os.path.exists(zippath):
        os.remove(zippath)

    for file in natsorted(files):
        if not file.lower().endswith('.jpg'):
            continue
        name = os.path.splitext(file)[0]
        path = os.path.join(dir, file)
        small_thumbnail = os.path.join('thumbnails', name + ' (small)' + '.jpg')
        medium_thumbnail = os.path.join('thumbnails', name + ' (medium)' + '.jpg')
        large_thumbnail = os.path.join('thumbnails', name + ' (large)' + '.jpg')

        # Carefully open image and extract metadata
        try:
            im = Image.open(path)
        except:
            continue
        try:
            date = im._getexif()[36867]
        except:
            date = ''
        try:
            original_width, original_height = im.size
        except:
            original_width = 1
            original_height = 1
        try:
            update_file = os.path.getmtime(os.path.join(dir, large_thumbnail)) < os.path.getmtime(path)
        except:
            update_file = True

        # Generate S, M and L thumbnails
        if(update_file):
            im.thumbnail((L,99999))
            im.save(os.path.join(dir, large_thumbnail), quality=95)
            im.thumbnail((M,99999))
            im.save(os.path.join(dir, medium_thumbnail), quality=95)
            im.thumbnail((S,99999))
            im.save(os.path.join(dir, small_thumbnail), quality=95)

        # Add original and large thumbnail to zip archive
        if options['zipping']:
            zipfile.write(path, os.path.join('print', file))
            zipfile.write(os.path.join(dir, large_thumbnail), os.path.join('web', file))

        photos.append({
            'name': name,
            'date': date,
            'small': small_thumbnail,
            'medium': medium_thumbnail,
            'large': large_thumbnail,
            'original': file,
            'raw': name + '.dng',
            's_height': S,
            'm_height': M,
            'l_height': L,
            's_width': int((S / original_height) * original_width),
            'm_width': int((M / original_height) * original_width),
            'l_width': int((L / original_height) * original_width),
        })

        print(path)

    if options['zipping']:
        print(zippath)
        zipfile.close()

    if options['sort'] == 'ascending':
        photos.sort(key=lambda p: p['date'])
    if options['sort'] == 'descending':
        photos.sort(key=lambda p: p['date'], reverse=True)
    if options['sort'] == 'alphabetical':
        pass # files were already sorted
    if options['sort'] == 'random':
        random.shuffle(photos)

    index = T.render({
        'photos': photos,
    })

    try:
        open(os.path.join(dir, 'index.html'), 'w').write(index)
    except:
        print('Couldnâ€™t write to ' + dir)

def read_inifile(inifile):
    '''Reads options from an ini file. Sets default values as well.
'''
    options = {}
    if not os.path.exists(inifile) or not os.path.getsize(inifile):
        with open(inifile, 'w') as f:
            f.write(DEFAULT_OPTIONS)

    if os.path.exists(inifile):
        cfg = ConfigParser()
        with open(inifile) as stream:
            stream = io.StringIO('[root]\n' + stream.read())
            cfg.read_file(stream)
        root = cfg['root']
        options['sort'] = root.get('sort', 'ascending')
        options['zipping'] = root.get('zip', 'true').lower() in ['true', 'yes', 'on']
    else:
        options['sort'] = 'ascending'
        options['zipping'] = True
    return options

if __name__ == '__main__':
    create_website()
